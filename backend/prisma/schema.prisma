// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with UUID, role, and cart relationship
model User {
  id       String @id @default(uuid()) @db.Uuid
  email    String @unique
  password String
  role     Role   @default(USER)

  carts    Cart[]
  orders   Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Product model with inventory and price
model Product {
  id          String @id @default(uuid()) @db.Uuid
  name        String @unique
  description String?
  price       Float
  stock       Int
  image       String
  rating      Float
  category    String

  
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Carts for both logged-in users and guests
model Cart {
  id        String @id @default(uuid()) @db.Uuid
  userId    String? @db.Uuid
  user      User?   @relation(fields: [userId], references: [id])
  isGuest   Boolean @default(true) // True if not associated with a User ID

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Items within a Cart
model CartItem {
  id        String @id @default(uuid()) @db.Uuid
  cartId    String @db.Uuid
  cart      Cart   @relation(fields: [cartId], references: [id])
  productId String @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Orders placed by users
model Order {
  id        String @id @default(uuid()) @db.Uuid
  userId    String @db.Uuid
  user      User   @relation(fields: [userId], references: [id])
  status    OrderStatus @default(PENDING)
  
  orderItems OrderItem[]
  // The relation field to link back to the Reservation model
  reservation Reservation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Items within an Order
model OrderItem {
  id        String @id @default(uuid()) @db.Uuid
  orderId   String @db.Uuid
  order     Order   @relation(fields: [orderId], references: [id])
  productId String @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Reservations for a product, used during checkout
model Reservation {
  id          String @id @default(uuid()) @db.Uuid
  productId   String @db.Uuid
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int
  expiresAt   DateTime
  isExpired   Boolean @default(false)
  
  // Reference back to the order that created this reservation
  orderId String? @unique @db.Uuid
  order Order? @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums for clarity and data integrity
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}